// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChessMessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ETHotfix {

  #region Messages
  public partial class ChessmanInfo : pb::IMessage {
    private static readonly pb::MessageParser<ChessmanInfo> _parser = new pb::MessageParser<ChessmanInfo>(() => (ChessmanInfo)MessagePool.Instance.Fetch(typeof(ChessmanInfo)));
    public static pb::MessageParser<ChessmanInfo> Parser { get { return _parser; } }

    private long chessmanId_;
    public long ChessmanId {
      get { return chessmanId_; }
      set {
        chessmanId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ChessmanId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ChessmanId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ChessmanId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChessmanId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      chessmanId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChessmanId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_DealCards : pb::IMessage {
    private static readonly pb::MessageParser<C2M_DealCards> _parser = new pb::MessageParser<C2M_DealCards>(() => (C2M_DealCards)MessagePool.Instance.Fetch(typeof(C2M_DealCards)));
    public static pb::MessageParser<C2M_DealCards> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_DealCards : pb::IMessage {
    private static readonly pb::MessageParser<M2C_DealCards> _parser = new pb::MessageParser<M2C_DealCards>(() => (M2C_DealCards)MessagePool.Instance.Fetch(typeof(M2C_DealCards)));
    public static pb::MessageParser<M2C_DealCards> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.ChessmanInfo> _repeated_chessmans_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.ChessmanInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.ChessmanInfo> chessmans_ = new pbc::RepeatedField<global::ETHotfix.ChessmanInfo>();
    public pbc::RepeatedField<global::ETHotfix.ChessmanInfo> Chessmans {
      get { return chessmans_; }
      set { chessmans_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      chessmans_.WriteTo(output, _repeated_chessmans_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += chessmans_.CalculateSize(_repeated_chessmans_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < chessmans_.Count; i++) { MessagePool.Instance.Recycle(chessmans_[i]); }
      chessmans_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            chessmans_.AddEntriesFrom(input, _repeated_chessmans_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_BroadcastDealCard : pb::IMessage {
    private static readonly pb::MessageParser<M2C_BroadcastDealCard> _parser = new pb::MessageParser<M2C_BroadcastDealCard>(() => (M2C_BroadcastDealCard)MessagePool.Instance.Fetch(typeof(M2C_BroadcastDealCard)));
    public static pb::MessageParser<M2C_BroadcastDealCard> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private global::ETHotfix.ChessmanInfo chessman_;
    public global::ETHotfix.ChessmanInfo Chessman {
      get { return chessman_; }
      set {
        chessman_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (chessman_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Chessman);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (chessman_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Chessman);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      id_ = 0;
      if (chessman_ != null) MessagePool.Instance.Recycle(chessman_); chessman_ = null;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            if (chessman_ == null) {
              chessman_ = new global::ETHotfix.ChessmanInfo();
            }
            input.ReadMessage(chessman_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_SellCard : pb::IMessage {
    private static readonly pb::MessageParser<C2M_SellCard> _parser = new pb::MessageParser<C2M_SellCard>(() => (C2M_SellCard)MessagePool.Instance.Fetch(typeof(C2M_SellCard)));
    public static pb::MessageParser<C2M_SellCard> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long chessmanId_;
    public long ChessmanId {
      get { return chessmanId_; }
      set {
        chessmanId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ChessmanId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ChessmanId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ChessmanId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChessmanId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      chessmanId_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChessmanId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_SellCard : pb::IMessage {
    private static readonly pb::MessageParser<M2C_SellCard> _parser = new pb::MessageParser<M2C_SellCard>(() => (M2C_SellCard)MessagePool.Instance.Fetch(typeof(M2C_SellCard)));
    public static pb::MessageParser<M2C_SellCard> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long chessmanId_;
    public long ChessmanId {
      get { return chessmanId_; }
      set {
        chessmanId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ChessmanId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ChessmanId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (ChessmanId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChessmanId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      chessmanId_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChessmanId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_AddExp : pb::IMessage {
    private static readonly pb::MessageParser<C2M_AddExp> _parser = new pb::MessageParser<C2M_AddExp>(() => (C2M_AddExp)MessagePool.Instance.Fetch(typeof(C2M_AddExp)));
    public static pb::MessageParser<C2M_AddExp> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_AddExp : pb::IMessage {
    private static readonly pb::MessageParser<M2C_AddExp> _parser = new pb::MessageParser<M2C_AddExp>(() => (M2C_AddExp)MessagePool.Instance.Fetch(typeof(M2C_AddExp)));
    public static pb::MessageParser<M2C_AddExp> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private bool result_;
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != false) {
        output.WriteRawTag(8);
        output.WriteBool(Result);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Result != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      result_ = false;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadBool();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class AddGold : pb::IMessage {
    private static readonly pb::MessageParser<AddGold> _parser = new pb::MessageParser<AddGold>(() => (AddGold)MessagePool.Instance.Fetch(typeof(AddGold)));
    public static pb::MessageParser<AddGold> Parser { get { return _parser; } }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private int gold_;
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Gold != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Gold);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      id_ = 0;
      gold_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            Gold = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///加金币
  /// </summary>
  public partial class M2C_BroadcastAddGold : pb::IMessage {
    private static readonly pb::MessageParser<M2C_BroadcastAddGold> _parser = new pb::MessageParser<M2C_BroadcastAddGold>(() => (M2C_BroadcastAddGold)MessagePool.Instance.Fetch(typeof(M2C_BroadcastAddGold)));
    public static pb::MessageParser<M2C_BroadcastAddGold> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.AddGold> _repeated_golds_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.AddGold.Parser);
    private pbc::RepeatedField<global::ETHotfix.AddGold> golds_ = new pbc::RepeatedField<global::ETHotfix.AddGold>();
    public pbc::RepeatedField<global::ETHotfix.AddGold> Golds {
      get { return golds_; }
      set { golds_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      golds_.WriteTo(output, _repeated_golds_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += golds_.CalculateSize(_repeated_golds_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < golds_.Count; i++) { MessagePool.Instance.Recycle(golds_[i]); }
      golds_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            golds_.AddEntriesFrom(input, _repeated_golds_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
